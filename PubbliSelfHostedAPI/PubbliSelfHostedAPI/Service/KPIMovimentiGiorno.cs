//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.17929.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="KPIMovimentiGiornoSoap", Namespace="http://www.ilsole24Ore.com")]
public partial class KPIMovimentiGiorno : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetKPIOperationCompleted;
    
    /// <remarks/>
    public KPIMovimentiGiorno() {
        this.Url = "http://pubbli.24orecww.com/app/ReportingSystemMLT/services/KPIMovimentiGiorno.asm" +
            "x";
    }
    
    /// <remarks/>
    public event GetKPICompletedEventHandler GetKPICompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ilsole24Ore.com/GetKPI", RequestNamespace="http://www.ilsole24Ore.com", ResponseNamespace="http://www.ilsole24Ore.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetKPI(string strUserId) {
        object[] results = this.Invoke("GetKPI", new object[] {
                    strUserId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetKPI(string strUserId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetKPI", new object[] {
                    strUserId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetKPI(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetKPIAsync(string strUserId) {
        this.GetKPIAsync(strUserId, null);
    }
    
    /// <remarks/>
    public void GetKPIAsync(string strUserId, object userState) {
        if ((this.GetKPIOperationCompleted == null)) {
            this.GetKPIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKPIOperationCompleted);
        }
        this.InvokeAsync("GetKPI", new object[] {
                    strUserId}, this.GetKPIOperationCompleted, userState);
    }
    
    private void OnGetKPIOperationCompleted(object arg) {
        if ((this.GetKPICompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetKPICompleted(this, new GetKPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetKPICompletedEventHandler(object sender, GetKPICompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetKPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetKPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
